<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="question">
	<sql id="includeBoard">
		<if test="searchKeyword != null and searchKeyword != ''">
			where question_id != 0 and (
			<foreach item="item" index="index" collection="searchTypeArr" separator="or">
				${item} like CONCAT('%',#{searchKeyword},'%')
			</foreach>
			)
		</if>
	</sql>
	
	<select id="total" resultType="Integer" parameterType="searchVO">
		select COUNT(*) from question
		<include refid="includeBoard" />
	</select>
	
	<select id="list" resultType="Question" parameterType="searchVO">
		select * , (select count(*) from question_comment q where q.question_id=question.question_id) as cnt from question
		<include refid="includeBoard"/>
		order by question_id desc LIMIT ${rowStart-1},${displayRowCount}
	</select>
	
	<insert id="add" parameterType="Question">
		insert into question(question_name,question_content,question_date,id,img_chk,point_set)
		values(#{questionName},#{questionContent},NOW(),#{id},#{imgChk},#{pointSet})
	</insert>
	
	<select id="item" resultType="Question">
		select *, (select count(*) from question_comment qc where qc.question_id=question.question_id) as cnt
		from question where question_id=#{questionId}
	</select>
	
	<update id="update" parameterType="Question">
		update question 
		set question_name=#{questionName},question_content=#{questionContent},img_chk=#{imgChk},point_set=#{pointSet}
		where question_id=#{questionId}
	</update>
	
	<delete id="delete">
		delete from question where question_id=#{questionId}
	</delete>
	
	<select id="commentList" resultType="QComment">
		select * from question_comment where question_id=#{questionId} order by selection_check desc, qcomment_id desc
	</select>
	
	<insert id="commentAdd" parameterType="QComment">
		insert into question_comment
		(id,question_id,qcomment_content,qcomment_date,tier)
		values(#{id},#{questionId},#{qcommentContent},NOW(),#{tier})
	</insert>
	
	<delete id="commentDel">
		delete from question_comment where qcomment_id = #{qcommentId}
	</delete>
	
	<update id="commentUpdate">
		update question_comment
		set qcomment_content = #{qcommentContent}, qcomment_date=NOW()
		where qcomment_id = #{qcommentId}
	</update>
	
	<update id="views" parameterType="Question">
		update question
		set question_views= question_views+1
		where question_id=#{questionId}
	</update>
	
	<update id="selection">
		update question_comment
		set selection_check = 1
		where qcomment_id = #{qcommentId}
	</update>
	
	<update id="pointUp" parameterType="UserVO">
		update user
		set point = point + 10 + #{pointSet}
		where username = #{id}
	</update>
	
	<select id="onlyOnceSelection" resultType="Integer">
		select distinct COUNT(qc.selection_check)
		from question_comment qc JOIN question q ON qc.question_id = q.question_id
		where qc.question_id = #{questionId} and qc.selection_check=1
	</select>
	
	<select id="userpoint" parameterType="UserVO" resultType="Integer">
		select point
		from user
		where username=#{username}
	</select>
	
	<update id="pointDown" parameterType="UserVO">
		update user
		set point = point - #{pointSet}
		where username = #{id}
	</update>
	
	<select id="trainerCheck" resultType="String">
		select authority from user where username=#{pointGetUser}
	</select>
	
	<update id="tierLevelUp">
		update user
		set tier = #{tier}
		where username = #{id}
	</update>
	
	<update id="startTier" parameterType="TrainerProfile">
		update user
		set tier = "bronze"
		where username = #{username}
	</update>
	
	<select id="tierCheck" resultType="String">
		select tier from user where username = #{username}
	</select>
	
</mapper>